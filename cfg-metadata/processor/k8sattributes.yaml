type: '*k8sattributesprocessor.Config'
doc: |
  Config defines configuration for k8s attributes processor.
fields:
- name: auth_type
  type: k8sconfig.AuthType
  kind: string
  default: serviceAccount
  doc: |
    How to authenticate to the K8s API server.  This can be one of `none`
    (for no auth), `serviceAccount` (to use the standard service account
    token provided to the agent pod), or `kubeConfig` to use credentials
    from `~/.kube/config`.
- name: passthrough
  kind: bool
  default: false
  doc: |
    Passthrough mode only annotates resources with the pod IP and
    does not try to extract any other metadata. It does not need
    access to the K8S cluster API. Agent/Collector must receive spans
    directly from services to be able to correctly detect the pod IPs.
- name: extract
  type: k8sattributesprocessor.ExtractConfig
  kind: struct
  doc: |
    Extract section allows specifying extraction rules to extract
    data from k8s pod specs
  fields:
  - name: metadata
    type: '[]string'
    kind: slice
    doc: |
      Metadata allows to extract pod/namespace metadata from a list of metadata fields.
      The field accepts a list of strings.

      Metadata fields supported right now are,
        k8s.pod.name, k8s.pod.uid, k8s.deployment.name,
        k8s.node.name, k8s.namespace.name, k8s.pod.start_time,
        k8s.replicaset.name, k8s.replicaset.uid,
        k8s.daemonset.name, k8s.daemonset.uid,
        k8s.job.name, k8s.job.uid, k8s.cronjob.name,
        k8s.statefulset.name, k8s.statefulset.uid,
        k8s.container.name, container.image.name,
        container.image.tag, container.id

      Specifying anything other than these values will result in an error.
      By default, the following fields are extracted and added to spans, metrics and logs as attributes:
       - k8s.pod.name
       - k8s.pod.uid
       - k8s.pod.start_time
       - k8s.namespace.name
       - k8s.node.name
       - k8s.deployment.name (if the pod is controlled by a deployment)
       - k8s.container.name (requires an additional attribute to be set: container.id)
       - container.image.name (requires one of the following additional attributes to be set: container.id or k8s.container.name)
       - container.image.tag (requires one of the following additional attributes to be set: container.id or k8s.container.name)
  - name: annotations
    type: '[]k8sattributesprocessor.FieldExtractConfig'
    kind: slice
    doc: |
      Annotations allows extracting data from pod annotations and record it
      as resource attributes.
      It is a list of FieldExtractConfig type. See FieldExtractConfig
      documentation for more details.
    fields:
    - name: tag_name
      kind: string
      default: ""
      doc: |
        TagName represents the name of the resource attribute that will be added to logs, metrics or spans.
        When not specified, a default tag name will be used of the format:
          - k8s.pod.annotations.<annotation key>
          - k8s.pod.labels.<label key>
        For example, if tag_name is not specified and the key is git_sha,
        then the attribute name will be `k8s.pod.annotations.git_sha`.
        When key_regex is present, tag_name supports back reference to both named capturing and positioned capturing.
        For example, if your pod spec contains the following labels,

        app.kubernetes.io/component: mysql
        app.kubernetes.io/version: 5.7.21

        and you'd like to add tags for all labels with prefix app.kubernetes.io/ and also trim the prefix,
        then you can specify the following extraction rules:

        extract:
          labels:
            - tag_name: $$1
              key_regex: kubernetes.io/(.*)

        this will add the `component` and `version` tags to the spans or metrics.
    - name: key
      kind: string
      default: ""
      doc: |
        Key represents the annotation (or label) name. This must exactly match an annotation (or label) name.
    - name: key_regex
      kind: string
      default: ""
      doc: |
        KeyRegex is a regular expression used to extract a Key that matches the regex.
        Out of Key or KeyRegex, only one option is expected to be configured at a time.
    - name: regex
      kind: string
      default: ""
      doc: |
        Regex is an optional field used to extract a sub-string from a complex field value.
        The supplied regular expression must contain one named parameter with the string "value"
        as the name. For example, if your pod spec contains the following annotation,

        kubernetes.io/change-cause: 2019-08-28T18:34:33Z APP_NAME=my-app GIT_SHA=58a1e39 CI_BUILD=4120

        and you'd like to extract the GIT_SHA and the CI_BUILD values as tags, then you must
        specify the following two extraction rules:

        extract:
          annotations:
            - tag_name: git.sha
              key: kubernetes.io/change-cause
              regex: GIT_SHA=(?P<value>\w+)
            - tag_name: ci.build
              key: kubernetes.io/change-cause
              regex: JENKINS=(?P<value>[\w]+)

        this will add the `git.sha` and `ci.build` resource attributes.
    - name: from
      kind: string
      default: ""
      doc: |
        From represents the source of the labels/annotations.
        Allowed values are "pod" and "namespace". The default is pod.
  - name: labels
    type: '[]k8sattributesprocessor.FieldExtractConfig'
    kind: slice
    doc: |
      Labels allows extracting data from pod labels and record it
      as resource attributes.
      It is a list of FieldExtractConfig type. See FieldExtractConfig
      documentation for more details.
    fields:
    - name: tag_name
      kind: string
      default: ""
      doc: |
        TagName represents the name of the resource attribute that will be added to logs, metrics or spans.
        When not specified, a default tag name will be used of the format:
          - k8s.pod.annotations.<annotation key>
          - k8s.pod.labels.<label key>
        For example, if tag_name is not specified and the key is git_sha,
        then the attribute name will be `k8s.pod.annotations.git_sha`.
        When key_regex is present, tag_name supports back reference to both named capturing and positioned capturing.
        For example, if your pod spec contains the following labels,

        app.kubernetes.io/component: mysql
        app.kubernetes.io/version: 5.7.21

        and you'd like to add tags for all labels with prefix app.kubernetes.io/ and also trim the prefix,
        then you can specify the following extraction rules:

        extract:
          labels:
            - tag_name: $$1
              key_regex: kubernetes.io/(.*)

        this will add the `component` and `version` tags to the spans or metrics.
    - name: key
      kind: string
      default: ""
      doc: |
        Key represents the annotation (or label) name. This must exactly match an annotation (or label) name.
    - name: key_regex
      kind: string
      default: ""
      doc: |
        KeyRegex is a regular expression used to extract a Key that matches the regex.
        Out of Key or KeyRegex, only one option is expected to be configured at a time.
    - name: regex
      kind: string
      default: ""
      doc: |
        Regex is an optional field used to extract a sub-string from a complex field value.
        The supplied regular expression must contain one named parameter with the string "value"
        as the name. For example, if your pod spec contains the following annotation,

        kubernetes.io/change-cause: 2019-08-28T18:34:33Z APP_NAME=my-app GIT_SHA=58a1e39 CI_BUILD=4120

        and you'd like to extract the GIT_SHA and the CI_BUILD values as tags, then you must
        specify the following two extraction rules:

        extract:
          annotations:
            - tag_name: git.sha
              key: kubernetes.io/change-cause
              regex: GIT_SHA=(?P<value>\w+)
            - tag_name: ci.build
              key: kubernetes.io/change-cause
              regex: JENKINS=(?P<value>[\w]+)

        this will add the `git.sha` and `ci.build` resource attributes.
    - name: from
      kind: string
      default: ""
      doc: |
        From represents the source of the labels/annotations.
        Allowed values are "pod" and "namespace". The default is pod.
- name: filter
  type: k8sattributesprocessor.FilterConfig
  kind: struct
  doc: |
    Filter section allows specifying filters to filter
    pods by labels, fields, namespaces, nodes, etc.
  fields:
  - name: node
    kind: string
    default: ""
    doc: |
      Node represents a k8s node or host. If specified, any pods not running
      on the specified node will be ignored by the tagger.
  - name: node_from_env_var
    kind: string
    default: ""
    doc: |
      NodeFromEnv can be used to extract the node name from an environment
      variable. The value must be the name of the environment variable.
      This is useful when the node a Otel agent will run on cannot be
      predicted. In such cases, the Kubernetes downward API can be used to
      add the node name to each pod as an environment variable. K8s tagger
      can then read this value and filter pods by it.

      For example, node name can be passed to each agent with the downward API as follows

      env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName

      Then the NodeFromEnv field can be set to `K8S_NODE_NAME` to filter all pods by the node that
      the agent is running on.

      More on downward API here: https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
  - name: namespace
    kind: string
    default: ""
    doc: |
      Namespace filters all pods by the provided namespace. All other pods are ignored.
  - name: fields
    type: '[]k8sattributesprocessor.FieldFilterConfig'
    kind: slice
    doc: |
      Fields allows to filter pods by generic k8s fields.
      Only the following operations are supported:
         - equals
         - not-equals

      Check FieldFilterConfig for more details.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key represents the key or name of the field or labels that a filter
        can apply on.
    - name: value
      kind: string
      default: ""
      doc: |
        Value represents the value associated with the key that a filter
        operation specified by the `Op` field applies on.
    - name: op
      kind: string
      default: ""
      doc: |
        Op represents the filter operation to apply on the given
        Key: Value pair. The following operations are supported
          equals, not-equals, exists, does-not-exist.
  - name: labels
    type: '[]k8sattributesprocessor.FieldFilterConfig'
    kind: slice
    doc: |
      Labels allows to filter pods by generic k8s pod labels.
      Only the following operations are supported:
         - equals
         - not-equals
         - exists
         - not-exists

      Check FieldFilterConfig for more details.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key represents the key or name of the field or labels that a filter
        can apply on.
    - name: value
      kind: string
      default: ""
      doc: |
        Value represents the value associated with the key that a filter
        operation specified by the `Op` field applies on.
    - name: op
      kind: string
      default: ""
      doc: |
        Op represents the filter operation to apply on the given
        Key: Value pair. The following operations are supported
          equals, not-equals, exists, does-not-exist.
- name: pod_association
  type: '[]k8sattributesprocessor.PodAssociationConfig'
  kind: slice
  doc: |
    Association section allows to define rules for tagging spans, metrics,
    and logs with Pod metadata.
  fields:
  - name: sources
    type: '[]k8sattributesprocessor.PodAssociationSourceConfig'
    kind: slice
    doc: |
      List of pod association sources which should be taken
      to identify pod
    fields:
    - name: from
      kind: string
      default: ""
      doc: |
        From represents the source of the association.
        Allowed values are "connection" and "resource_attribute".
    - name: name
      kind: string
      default: ""
      doc: |
        Name represents extracted key name.
        e.g. ip, pod_uid, k8s.pod.ip
- name: exclude
  type: k8sattributesprocessor.ExcludeConfig
  kind: struct
  doc: |
    Exclude section allows to define names of pod that should be
    ignored while tagging.
  fields:
  - name: pods
    type: '[]k8sattributesprocessor.ExcludePodConfig'
    kind: slice
    doc: |
      ExcludePodConfig represent a Pod name to ignore
    fields:
    - name: name
      kind: string
      default: ""
